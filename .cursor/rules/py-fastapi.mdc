---
description: 
globs: *.py
---
<fastapi_guidelines>
    <introduction>
        You are an expert in Python, FastAPI, and scalable API development.
    </introduction>

    <key_principles>
        <section_title>Key Principles</section_title>
        - Write concise, technical responses with accurate Python examples.
        - Use functional, declarative programming; avoid classes where possible (except for singletons and specific use cases).
        - Prefer iteration and modularization over code duplication.
        - Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
        - Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
        - Favor named exports for routes and utility functions.
        - Use the Receive an Object, Return an Object (RORO) pattern.
    </key_principles>

    <technical_specifications>
        <python_fastapi_guidelines>
            <section_title>Python/FastAPI</section_title>
            - Use def for pure functions and async def for asynchronous operations.
            - Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
            - File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
            - Avoid unnecessary curly braces in conditional statements.
            - For single-line statements in conditionals, omit curly braces.
            - Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).
        </python_fastapi_guidelines>

        <project_structure>
            <section_title>Project Structure</section_title>
            <code_block>
app/
├── api/
│   ├── __init__.py
│   ├── routes/
│   │   └── v1/
├── core/
│   ├── __init__.py
│   ├── config.py
│   ├── logger.py
│   └── database.py
├── models/
│   └── __init__.py
├── schemas/
│   └── __init__.py
├── services/
│   └── __init__.py
├── utils/
│   └── __init__.py
└── main.py
            </code_block>
        </project_structure>

        <configuration_management>
            <section_title>Configuration Management</section_title>
            - Use Pydantic BaseSettings for configuration management
            - Implement in core/config.py:
            <code_block>
from pydantic import BaseSettings, SecretStr
from functools import lru_cache

class Settings(BaseSettings):
    # Supabase Configuration
    SUPABASE_URL: str
    SUPABASE_KEY: SecretStr
    
    # API Configuration
    API_VERSION: str = "v1"
    DEBUG: bool = False
    
    # Rich Logger Configuration
    LOG_LEVEL: str = "INFO"
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True

@lru_cache()
def get_settings() -> Settings:
    return Settings()
            </code_block>
        </configuration_management>

        <core_components>
            <logging_setup>
                <section_title>Logging Setup (core/logger.py)</section_title>
                <code_block>
from rich.console import Console
from rich.logging import RichHandler
import logging

class LoggerSingleton:
    _instance = None
    _console = None
    _logger = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._setup_logger()
        return cls._instance

    @classmethod
    def _setup_logger(cls):
        cls._console = Console()
        logging.basicConfig(
            level="INFO",
            format="%(message)s",
            datefmt="[%X]",
            handlers=[RichHandler(console=cls._console)]
        )
        cls._logger = logging.getLogger("rich")

    @classmethod
    def get_logger(cls):
        if cls._instance is None:
            cls()
        return cls._logger

    @classmethod
    def get_console(cls):
        if cls._instance is None:
            cls()
        return cls._console
                </code_block>
            </logging_setup>

            <database_setup>
                <section_title>Database Setup (core/database.py)</section_title>
                <code_block>
from supabase import create_client, Client
from app.core.config import get_settings

class SupabaseClient:
    _instance: Client = None
    
    @classmethod
    def get_client(cls) -> Client:
        if cls._instance is None:
            settings = get_settings()
            cls._instance = create_client(
                supabase_url=settings.SUPABASE_URL,
                supabase_key=settings.SUPABASE_KEY.get_secret_value()
            )
        return cls._instance

def get_db():
    return SupabaseClient.get_client()
                </code_block>
            </database_setup>
        </core_components>
    </technical_specifications>

    <implementation_guidelines>
        <error_handling>
            <section_title>Error Handling and Validation</section_title>
            - Prioritize error handling and edge cases:
              - Handle errors and edge cases at the beginning of functions.
              - Use early returns for error conditions to avoid deeply nested if statements.
              - Place the happy path last in the function for improved readability.
              - Avoid unnecessary else statements; use the if-return pattern instead.
              - Use guard clauses to handle preconditions and invalid states early.
              - Implement proper error logging with Rich.
              - Use custom error types or error factories for consistent error handling.

            <code_block>
from rich.traceback import install
install(show_locals=True)

class APIError(Exception):
    def __init__(self, message: str, status_code: int = 500):
        self.message = message
        self.status_code = status_code
        LoggerSingleton.get_logger().error(
            f"[red]Error {status_code}:[/red] {message}"
        )
        super().__init__(self.message)
            </code_block>
        </error_handling>

        <dependencies>
            <section_title>Dependencies</section_title>
            - FastAPI
            - Pydantic v2
            - supabase-py
            - rich
            - python-dotenv (for .env file support)
        </dependencies>

        <fastapi_practices>
            <section_title>FastAPI-Specific Guidelines</section_title>
            - Use functional components (plain functions) and Pydantic models for input validation and response schemas.
            - Use declarative route definitions with clear return type annotations.
            - Use def for synchronous operations and async def for asynchronous ones.
            - Minimize @app.on_event("startup") and @app.on_event("shutdown"); prefer lifespan context managers for managing startup and shutdown events.
            - Use middleware for logging, error monitoring, and performance optimization.
            - Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading.
            - Use HTTPException for expected errors and model them as specific HTTP responses.
            - Use middleware for handling unexpected errors, logging, and error monitoring.
            - Use Pydantic's BaseModel for consistent input/output validation and response schemas.

            <middleware_example>
                <code_block>
@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    logger = LoggerSingleton.get_logger()
    start_time = time.time()
    
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        logger.info(
            f"[green]{request.method}[/green] {request.url.path} "
            f"Completed in {process_time:.2f}s"
        )
        return response
    except Exception as e:
        logger.exception("[red]Request failed[/red]")
        raise e
                </code_block>
            </middleware_example>
        </fastapi_practices>

        <performance>
            <section_title>Performance Optimization</section_title>
            - Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests.
            - Implement caching for static and frequently accessed data using tools like Redis or in-memory stores.
            - Optimize data serialization and deserialization with Pydantic.
            - Use lazy loading techniques for large datasets and substantial API responses.
            - Utilize Supabase's built-in caching mechanisms when appropriate.
        </performance>

        <conventions>
            <section_title>Key Conventions</section_title>
            1. Rely on FastAPI's dependency injection system for managing state and shared resources.
            2. Prioritize API performance metrics (response time, latency, throughput).
            3. Limit blocking operations in routes:
               - Favor asynchronous and non-blocking flows.
               - Use dedicated async functions for database and external API operations.
               - Structure routes and dependencies clearly to optimize readability and maintainability.
            Refer to FastAPI documentation for Data Models, Path Operations, and Middleware for additional best practices.
        </conventions>
    </implementation_guidelines>
</fastapi_guidelines>