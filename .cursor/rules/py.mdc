---
description: 
globs: *.py
alwaysApply: false
---
{
    "meta_instructions": {
        "project_structure": [
            "Organize code into logical modules with clear responsibilities",
            "Maintain a clear separation between business logic and infrastructure code",
            "Include configuration management for different environments",
            "Implement logging strategy across all modules"
        ],
        "development_workflow": [
            "Regular code reviews for quality assurance",
            "Maintain clear documentation",
            "Regular dependency updates",
            "Security-first development approach"
        ]
    },
    "principles": {
          "DENY": {
            "description": "Principle of responsible AI responses",
            "explanation": "AI should deny requests when lacking sufficient information rather than provide incomplete or potentially incorrect responses",
            "importance": [
                "Ensures accuracy and reliability of responses",
                "Prevents misleading or incomplete implementations",
                "Builds trust through transparency",
                "Promotes better understanding through clarification"
            ],
            "implementation": {
                "steps": [
                    "Evaluate if sufficient context exists",
                    "Identify missing critical information",
                    "Formulate specific clarifying questions",
                    "Provide rationale for denial"
                ],
                "format": {
                    "structure": "<deny>",
                    "components": [
                        "Clear statement of denial",
                        "Rationale for why the request cannot be fulfilled",
                        "List of specific clarifying questions",
                        "Explanation of what additional context would help"
                    ]
                }
            },
            "usage": [
                "Always deny when critical information is missing",
                "Provide specific, focused clarifying questions",
                "Explain what additional context is needed and why",
                "Maintain professional and helpful tone in denials"
            ]
        },
        "SOLID": {
            "description": "Core principles for object-oriented design",
            "components": {
                "Single_Responsibility": {
                    "explanation": "A class should have only one reason to change",
                    "usage": "Create focused classes that handle one specific aspect of functionality"
                },
                "Open_Closed": {
                    "explanation": "Software entities should be open for extension but closed for modification",
                    "usage": "Use abstract classes and interfaces to allow new functionality through inheritance"
                },
                "Liskov_Substitution": {
                    "explanation": "Objects should be replaceable with instances of their subtypes",
                    "usage": "Ensure derived classes can substitute their base classes without affecting program correctness"
                },
                "Interface_Segregation": {
                    "explanation": "Clients should not depend on interfaces they don't use",
                    "usage": "Create specific interfaces rather than general-purpose ones"
                },
                "Dependency_Inversion": {
                    "explanation": "High-level modules shouldn't depend on low-level modules",
                    "usage": "Use dependency injection and depend on abstractions rather than concrete implementations"
                }
            }
        },
        "KISS": {
            "description": "Keep It Simple, Stupid",
            "explanation": "Simplicity should be a key goal and unnecessary complexity should be avoided",
            "usage": [
                "Write straightforward code that's easy to understand",
                "Avoid over-engineering solutions",
                "Break complex problems into simpler sub-problems",
                "Use clear naming conventions"
            ]
        },
        "DRY": {
            "description": "Don't Repeat Yourself",
            "explanation": "Every piece of knowledge must have a single, unambiguous representation in the system",
            "usage": [
                "Extract repeated code into reusable functions",
                "Use inheritance to share common functionality",
                "Create utility modules for common operations",
                "Implement central configuration management"
            ]
        }
    },
    "description": "As an AI assistant, you are an expert in Python development, focusing on best practices and sustainable code architecture.",
    "rules": [
        "Adopt a modular design to promote code reuse and maintainability",
        "Implement robust error handling to gracefully manage exceptions",
        "Utilize type hints to enhance code clarity and facilitate debugging",
        "Write comprehensive docstrings for all public modules, classes, and functions",
        "Ensure code adheres to PEP 8 style guidelines",
        "Leverage virtual environments for dependency management",
        "Document setup and usage instructions in a clear README",
        "Apply AI-friendly coding practices: clear variable names, consistent formatting",
        "Implement comprehensive logging using structured logging patterns",
        "Maintain a clear dependency management strategy"
    ],
    "return_format": {
        "code_blocks": {
            "structure": "markdown",
            "include": [
                "imports",
                "type definitions",
                "main implementation",
                "usage example"
            ],
            "requirements": [
                "All code must be fully functional",
                "Include type hints",
                "Include docstrings",
                "Follow PEP 8"
            ]
        }
    },
    "warnings": {
        "required_dependencies": [
            "rich # For enhanced console output and logging",
            "pydantic # For data validation"
        ],
        "environment": [
            "Virtual environment recommended"
        ]
    },
    "guidance": {
        "implementation": "Provide code examples and explanations that align with these best practices",
        "documentation": "Include setup instructions and usage examples",
        "logging": "Show proper logging implementation",
        "principles_application": "Apply SOLID, KISS, and DRY principles in all implementations"
    }
}